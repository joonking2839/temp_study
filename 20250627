1.object literal(리터럴 객체)

## 4-1. object(객체)

자바스크립트는 객체 기반 프로그래밍 언어로 원시 값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 객체이다. 객체는 0개 이상의 프로퍼티로 구성 된 집합이며 프로퍼티는 키(key)와 값(value)으로 구성된다. 자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있다. 프로퍼티 값이 함수일 경우 method라고 부른다.

### 객체 생성 방법

자바, C++ 같은 클래스 기반 객체 지향 언어는 클래스를 사전에 정의하고 필요한 시점에 new 연산자와 함께 생성자를 호출하여 인스턴스를 생성하는 방식으로 객체를 생성한다. 자바스크립트는 프로토타입 기반 객체지향 언어로 클래스 기반 객체 지향 언어와는 달리 다양한 객체 생성 방법 지원한다. 1. 객체 리터럴 2. Object 생성자 함수 3. 생성자 함수 4. Object.create 메서드 5. Class(ES6) 이 중 가장 일반적이고 간단한 방법이 객체 리터럴을 사용하는 방법이다. 중괄호 내 0개 이상의 프로퍼티를 정의한다.

```
var student = {    
	// 키-값 쌍으로 구성 된 프로퍼티    
	// 프로퍼티 : 객체의 상태를 나타내는 값(data)    
	name : '유관순',    
	age : 16,    
	// 메서드 : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)    
	getInfo : function(){        
	return `${this.name}(은)는 ${this.age}세입니다.`;    
	}
};
```

객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다. 따라서 닫는 중괄호 뒤에는 세미콜론을 붙인다. 숫자 값이나 문자열을 만드는 것과 유사하게 리터럴로 객체를 생성한다. 객체 리터럴에 프로퍼티를 포함시켜 객체를 생성함과 동시에 프로퍼티를 만들 수도 있고, 객체를 생성한 이후에 프로퍼티를 동적으로 추가할 수도 있다. 객체 리터럴 외의 객체 생성 방식은 모두 함수를 사용해서 생성하므로 함수 학습 이후에 다시 학습할 것이다.

## 4-2. property (속성)

객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성 된다.

### 4-2-1. property

```
var student = {    
	// 프로퍼티 키는 name, 프로퍼티 값은 '유관순'    
	name : '유관순',    // 프로퍼티 키는 age, 프로퍼티 값은 16    
	age : 16,    // 프로퍼티 나열은 쉼표로 구분하며 마지막 프로퍼티 뒤에 쉼표를 사용해도 된다.
};
```

- 프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
    - 프로퍼티 값에 접근하기 위한 식별자
    - 문자열이므로 따옴표를 사용하지만 식별자 네이밍 규칙을 따르는 경우 사용하지 않아도 된다.
    - 단, 식별자 네이밍 규칙을 따르지 않는 이름은 따옴표를 반드시 사용해야 하며 가능한 식별자 네이밍 규칙을 따르는 것을 권장한다.
- 프로퍼티 값 : 자바스크립트에서 사용할 수 있는 모든 값

### 4-2-2. method

```
var dog = {    
	name : '뽀삐',    
	// 메서드 - 객체에 묶여 있는 함수    
	eat : function (food) {        
	console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요.`);    
	}
}
```

자바스크립트의 함수는 객체이다. 함수는 값으로 취급할 수 있고 프로퍼티 값으로 사용할 수 있다.

### 4-2-3. property accessor(프로퍼티 접근)

```
console.log(dog.name);        // 마침표 표기법(dot notation)
console.log(dog['name']);     // 대괄호 표기법(square bracket notation)
```

- 마침표 표기법(dot notation)
- 대괄호 표기법(square bracket notation)
    - 프로퍼티 키는 반드시 따옴표로 감싼 문자열 사용한다.
    - 프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름일 경우 반드시 대괄호 표기법 사용한다.
    - 프로퍼티 키가 숫자로 이뤄진 문자열인 경우 따옴표를 생략할 수 있다.

### 4-2-4. property change, add, remove(프로퍼티 값 변경, 추가, 삭제)

```
var dog = { name : '뽀삐' }
dog.name = '두부';          // 프로퍼티 값 갱신
dog.age = 3;                // 프로퍼티 값 추가
delete dog.age;             // 프로퍼티 삭제
```

- 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.
- 프로퍼티 동적 추가
    - 존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성 되어 추가되고 프로퍼티 값이 할당 된다.
- 프로퍼티 삭제
    - delete 연산자는 객체의 프로퍼티를 삭제한다.
    - 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.

## 4-3. ES6

### 4-3-1. property value shorthand(프로퍼티 값 단축 구문)

```
var id = 'p-0001';
var price = 30000;
var product2 = { id, price };
```

ES6에서는 프로퍼티 값으로 변수를 사용하는 경우 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있다. 프로퍼티 키는 변수 이름으로 자동 생성 된다.

### 4-3-2. method shorthand(메서드 단축)

```
var dog = {    
	name : '두부',    
	// 메서드 축약 표현    
	eat(food) {        
	console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요.`);    
	}
}
```

- ES5에서 메서드를 정의하려면 프로퍼티 값으로 함수를 할당한다.
- ES6에서는 메서드를 정의할 때 function 키워드를 생략한 축약 표현을 사용할 수 있다.

## 4-4. additional-operator-and-traversal (추가 연산자와 순회)

### 4-4-1. in operator (in 연산자)

```
var student = {    
	name : '유관순'
};
console.log("name" in student);                 // true - 존재
console.log("height" in student);               // false - 존재하지 않음
```

- in 연산자를 이용해 프로퍼티 존재 여부를 확인할 수 있다.

### 4-4-2. for in

```
var student = {    
	name : '유관순',    
	age : 16
};
for (var key in student) {    
	console.log(`${key} : ${student[key]}`);   // name : '유관순', age : 16 출력
}
```

- for in 반복문을 이용해 객체의 모든 키를 순회할 수 있다

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. function(함수)
5-1. function definiton (함수 정의)
5-1-1. function declaration(함수 선언문)
function hello(name) {    
	return `${name}님 안녕하세요!`;
}
​
함수 선언문에서는 함수의 이름을 생략할 수 없다.
5-1-2. function expression(함수 표현식)
var hello = function (name) {    
	return `${name}님 안녕하세요!`;
}
​
함수 표현식에서는 함수명을 생략할 수 있다.
5-1-3. function hoisting (함수 호이스팅)
// 함수 참조
console.log(hello);
console.log(hi);

// 함수 호출
console.log(hello('홍길동'));
// TypeError: hi is not a function
// console.log(hi('홍길동'));

// 함수 선언문
function hello(name) {    
	return `${name}님 안녕하세요!`;
}

// 함수 표현식
var hi = function(name) {    
	return `${name} 안녕~`;
}
​
함수 선언문은 런타임 이전 자바스크립트 엔진에 의해 먼저 실행 된다. 따라서 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라고 한다.
변수 할당문의 값은 할당문이 실행되는 시점, 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.
함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야 한다.
5-2. function call(함수 호출)
5-2-1. parameter and arguments
매개변수는 함수 몸체 내부에서만 참조할 수 있다.
함수는 매개변수의 개수와 인수의 개수가 일치하는지 체크하지 않는다.
인수가 부족해서 할당되지 않은 매개변수의 값은 undefined이다.
매개변수보다 인수가 더 많은 경우 초과된 인수는 무시된다.
모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다.
가변인자 함수 구현 시 유용하게 사용 된다.
인수를 전달하지 않았을 경우, undefined를 전달하였을 경우 ES6에서 도입된 매개변수 기본값을 사용할 수 있다.
매개변수의 최대 개수에 대해 명시적인 제한은 없다.
하지만 이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 하므로 최대 3개 이상을 넘지 않는 것을 권장한다.
5-2-2. return
반환문은 리턴 키워드 뒤에 오는 값을 반환한다.
반환 값을 명시적으로 지정하지 않으면 undefined가 반환된다.
반환문을 생략할 수도 있다. 이때도 암묵적으로 undefined를 반환한다.
5-3. arrow function(화살표 함수)
5-3-1. arrow function basic syntax (화살표 함수 기본 문법)
var message;

// 기존 function 정의
message = function () {    
	return "Hello World!";
};
console.log(message());

// function 키워드 생략 가능
message = () => {    
	return "Arrow Function!";
};
console.log(message());

// 명령문이 하나만 있는 경우 중괄호 생략 가능
// 이 때 함수 몸체 내부의 문이 값으로 평가 될 수 있는 표현식인 문이라면 암묵적으로 반환 된다.
// return 키워드 생략 가능
message = () => "Arrow Functions are Simple!";
console.log(message());

// 매개변수가 있을 경우
message = (val1, val2) => "Arrow " + val1 + val2;
console.log(message('Function', '!'));

// 매개변수가 하나면 소괄호 생략 가능
// 매개변수가 없거나 여러 개일 경우 생략 불가하다
message = val => "Arrow " + val;
console.log(message('Functions are GOOD!!!'));
​
ES6에서 도입 된 화살표 함수는 function 키워드 대신 화살표를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다.
화살표 함수는 항상 익명 함수로 정의한다.
본문이 한 줄인 함수를 작성할 때 유용하다.
5-4. various type of functions(다양한 타입의 함수)
5-4-1. immediately invoked function expression(즉시 실행 함수)
(function() {    
	console.log('익명 즉시 실행 함수! 함수 정의와 동시에 호출!');
})();
​
함수 정의와 동시에 즉시 호출되는 함수로 단 한 번만 호출 되며 다시 호출할 수 없다.
5-4-2. recursive function(재귀 함수)
function factorial(n) {    
// n이 1 이하일 때 재귀 호출을 멈춘다.    
	if(n <= 1) return 1;    // 재귀 호출    
	return n * factorial(n - 1);
}
​
함수가 자기 자신을 호출하는 것을 재귀 호출이라고 한다.
재귀 호출을 수행하는 함수인 재귀 함수는 반복되는 처리를 위해 사용한다.
재귀 함수는 반복 되는 처리를 반복문 없이 구현할 수 있다는 장점이 있지만 무한 반복에 빠질 위험이 있고 이로 인해 스택 오버플로 에러를 발생시킬 수 있으므로 주의한다.
반복문보다 재귀 함수 사용이 더 직관적으로 이해하기 쉬울 때만 한정적으로 사용하는 것이 바람직하다.
5-4-3. nested function(중첩 함수)
function outer() {    
	var outerVal = '외부 함수';    
function inner() {        
	var innerVal = '내부 함수';        // 외부 함수의 변수를 참조할 수 있다.        
	console.log(outerVal, innerVal);    
	}    
	inner();
}
outer();
​
함수 내부에 정의 된 함수를 중첩 함수 또는 내부 함수라고 한다.
중첩 함수를 포함하는 함수는 외부 함수라고 한다.
일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다.
5-4-4. callback function(콜백 함수)
// 전달 받은 값을 증가 시켜주는 함수
function increase (value) {    
	return value + 1;
}
// 전달 받은 값을 감소 시켜주는 함수
function decrease (value) {    
	return value - 1;
}
// 전달 받은 함수에 전달 받은 값을 적용 시켜주는 고차 함수
function apply(func, value) {    
// 고차 함수는 매개변수를 통해 전달 받을 콜백 함수의 호출 시점을 결정해서 호출한다.    
// 콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백함수에 인수를 전달할 수 있다.    
	return func(value);
}
// 고차 함수로 콜백 함수를 전달하며 호출
console.log(apply(increase, 5));
console.log(apply(decrease, 5));
​
함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 한다.
매개변수를 통해 함수의 외부에서 콜백 함수를 전달 받은 함수를 고차 함수라고 한다.
콜백 함수는 고차 함수에 전달 되어 헬퍼 함수의 역할을 한다. 즉, 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다.
함수의 변하지 않는 공통 로직은 미리 정의해두고 경우에 따라 변경되는 로직은 추상화해서 함수 외부에서 내부로 전달하는 방식이다.
콜백 함수는 함수형 프로그래밍 패러다임뿐만 아니라 비동기 처리(이벤트, 타이머, ajax)에 활용되는 중요한 패턴이다. 또한 배열 고차 함수(map)에서도 사용 된다.
5-4-5. pure and impure function(순수 함수와 비순수 함수)
var cnt = 0;
// 순수 함수는 최소 하나 이상의 인수를 전달 받으며 인수의 불변성을 유지한다.
function increase(n) {    
	return ++n;
}
// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
cnt = increase(cnt);
console.log(cnt);
cnt = increase(cnt);
console.log(cnt);
// 비순수 함수
function decrease() {    
	return --cnt;   
// 외부 상태에 의존하며 외부 상태를 변경한다.
}
// 비순수 함수는 외부 상태(cnt)를 변경하므로 상태 변화를 추적하기 어려워진다.
cnt = decrease();
console.log(cnt);
cnt = decrease();
console.log(cnt);
​
순수 함수 : 외부 상태에 의존하지도 않고 변경하지도 않는 함수
비순수 함수 : 외부 상태에 의존하거나 외부 상태를 변경하는 함수
함수 외부 상태의 변경을 지양하는 순수 함수를 사용하는 것이 좋다.
