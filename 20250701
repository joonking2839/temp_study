## 1-1-1. use id (id 사용)

- Document.prototype.getElementById 메서드는 인수로 전달한 id 어트리뷰트 값을 갖는 하나의 요소 노드를 탐색하여 반환한다.
- 문서 내에 중복 된 id 값을 갖는 HTML 요소가 여러 개 존재하더라도 에러가 발생하지는 않지만 해당 id 값을 갖는 첫 번째 요소 노드만 반환한다.
- id 값을 갖는 HTML 요소가 존재하지 않는 경우 null을 반환한다.

## 1-1-2. use tag name (태그명 사용)

- Document.prototype/Element.prototype.getElementsByTagName 메서드는 인수로 전달한 태그 이름을 갖는 모든 요소 노드들을 탐색하여 반환한다.
- 메서드 이름의 Elements가 복수형인 것에서 알 수 있듯 여러 개의 요소 노드 객체를 갖는 DOM 컬렉션 객체인 HTMLCollection 객체를 반환한다.
- 해당 태그 이름을 갖는 요소가 존재하지 않을 경우 빈 HTMLCollection 객체 반환한다.

## 1-1-3. use class name (클래스명 사용)

- Document.prototype/Element.prototype.getElementsByClassName 메서드는 인수로 전달한 class 어트리뷰트 값을 갖는 모든 요소 노드들을 탐색하여 반환한다.
- 인수로 전달할 class 값은 공백으로 구분하여 여러 개의 class를 지정할 수 있다.
- 메서드 이름의 Elements가 복수형인 것에서 알 수 있듯 여러 개의 요소 노드 객체를 갖는 DOM 컬렉션 객체인 HTMLCollection 객체를 반환한다.
- 해당 class를 갖는 요소가 존재하지 않을 경우 빈 HTMLCollection 객체 반환한다.

## 1-1-4. use css (선택자 사용)

- Document.prototype/Element.prototype.querySelector 메서드는 인수로 전달한 CSS 선택자를 만족시키는 하나의 요소 노드를 탐색하여 반환한다.
- CSS 선택자를 만족시키는 요소 노드가 존재하지 않는 경우 null을 반환한다.
- Document.prototype/Element.prototype.querySelectorAll 메서드는 인수로 전달한 CSS 선택자를 만족시키는 모든 요소 노드를 탐색하여 반환한다.
- 여러 개의 요소 노드 객체를 갖는 DOM 컬렉션 객체인 NodeList 객체를 반환한다.
- NodeList 객체는 forEach 메서드를 사용할 수 있다.
- CSS 선택자를 만족시키는 요소가 존재하지 않는 경우 빈 NodeList 객체를 반환한다.

## 1-2-1. child node (자식 노드)

- Node.prototype.childNodes : 자식 노드(요소 노드, 텍스트 노드)를 탐색하여 NodeList에 담아 반환
- Node.prototype.firstChild : 첫 번째 자식 노드(요소 노드, 텍스트 노드) 반환
- Node.prototype.lastChild : 마지막 자식 노드(요소 노드, 텍스트 노드) 반환
- Element.prototype.children : 자식 노드 중 요소 노드만 탐색하여 HTMLCollection에 담아 반환
- Element.prototype.firstElementChild : 첫 번째 자식 요소 노드 반환
- Element.prototype.lastElementChild : 마지막 자식 요소 노드 반환
- Node.prototype.hasChildNodes 메서드를 사용하여 자식 노드 존재 여부를 확인한다.
- 텍스트 노드를 포함하여 자식 노드의 존재를 확인한다.
- 텍스트 노드를 제외한 요소 노드의 존재를 확인하고 싶다면 children.length, childElmentCount 등을 사용하여 확인한다.

## 1-2-2. parent node (부모 노드)

- 부모 노드를 탐색하려면 Node.prototype.parentNode 프로퍼티를 사용한다.
- 텍스트 노드는 DOM 트리의 최종단 노드인 리프 노드(leaf node)이므로 부모가 텍스트 노드인 경우는 없다.

## 1-2-3. sibling node (형제 노드)

- Node.prototype.previousSibling : 형제 노드 중 자신의 이전 형제 노드(요소 노드, 텍스트 노드)를 탐색하여 반환
- Node.prototype.nextSibling : 형제 노드 중 자신의 다음 형제 노드(요소 노드, 텍스트 노드)를 탐생하여 반환
- Element.prototype.previousElementSibling : 형제 요소 노드 중 자신의 이전 형제 요소 노드를 탐색하여 반환
- Element.prototype.nextElementSibling: 형제 요소 노드 중 자신의 다음 형제 요소 노드를 탐색하여 반환

## 1-3-1. get node info (노드 정보 취득)

- Node.prototype.nodeType : 노드 객체의 종류, 즉 노드 타입을 나타내는 상수 반환
    - Node.ELEMENT_NODE : 요소 노드 타입을 나타내는 상수 1 반환
    - Node.TEXT_NODE : 텍스트 노드 타입을 나타내는 상수 3 반환
    - Node.DOCUMENT_NODE : 문서 노드 타입을 나타내는 상수 9를 반환
- Node.prototype.nodeName : 노드의 이름을 문자열로 반환한다.
    - 요소 노드 : 다문자 문자열로 태그 이름을 반환
    - 텍스트 노드 : 문자열 “#text”를 반환
    - 문서 노드 : 문자열 “#document”를 반환

## 1-3-2. text node content (요소 노드의 텍스트 조작)

- 지금까지 살펴본 노드 탐색, 노드 정보 프로퍼티는 모두 읽기 전용 접근자 프로퍼티이다.
- Node.prototype.nodeValue 프로퍼티는 setter와 getter가 모두 존재하는 접근자 프로퍼티이다.
    - nodeValue 프로퍼티 참조 시 노드 객체의 값(텍스트 노드의 텍스트)을 반환한다.
    - 텍스트 노드가 아닌 노드(문서 노드, 요소 노드)의 경우 null을 반환한다.
    - 텍스트 노드의 nodeValue 프로퍼티에 값을 할당하면 텍스트 노드의 값을 변경할 수 있다.
- Node.prototype.textContent 프로퍼티는 setter와 getter 모두 존재하는 접근자 프로퍼티로서 요소 노드의 텍스트와 모든 자손 노드의 텍스트를 모두 취득하거나 변경한다.
    - 요소 노드의 textContent 프로퍼티를 참조하면 요소 노드의 콘텐츠 영역 내의 텍스트롤 모두 반환하며 이 때 HTML 마크업은 무시된다.
    - 요소 노드의 textContext 프로퍼티에 문자열을 할당하면 요소 노드의 모든 자식 노드가 제거 되고 할당한 문자열이 텍스트로 추가 된다. 이 때도 HTML 마크업은 무시되고 문자열 텍스트로 취급된다.
- innerText 프로퍼티는 textContent 프로퍼티와 유사한 동작을 하지만 CSS에 순종적(예를 들어 visibility:hidden; 은 반환하지 않음)이고, CSS 고려로 인해 느리기 때문에 사용하지 않는 것이 좋다.
