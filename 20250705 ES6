class 함수
/* 
    01. 클래스 기본 문법 
    동일한 종류의 객체를 여러 개 생성해야 하는 경우 객체 리터럴을 여러 개 생성하기 보다
    클래스 문법을 통해 동일한 종류의 객체를 재생성할 수 있다.
*/

// 01. 클래스 선언
class Student {

    // 생성자를 통해 인스턴스 생성 및 초기화
    // 생성자는 1개 이상 정의 될 수 없으며 생략할 경우 암묵적으로 정의된다.
    // 암묵적으로 this를 반환하므로 반환문은 작성하지 않는다.
    constructor(name) {
        this.group = 1; // 고정 값으로 인스턴스 초기화
        this.name = name;
    }

    // 프로토타입 메서드
    introduce() {
        console.log(`안녕하세요. 저는 ${this.group}반 학생 ${this.name} 입니다.`);
    }
}

let student = new Student('홍길동');    // 인수로 초기값을 전달해서 객체 생성
student.introduce();

console.log(typeof Student);            // 클래스는 함수의 한 종류이다.
console.log(Student === Student.prototype.constructor);     // 정확하게는 생성자 메서드와 동일하다.
console.log(Student.prototype.introduce);                   // 클래스 내부에 정의한 메서드는 클래스.prototype에 저장된다.
console.log(Object.getOwnPropertyNames(Student.prototype)); // 현재 프로토타입에는 constructor, introduce 두 개의 메서드가 있다.

// 생성자 함수 - 클래스 문법과 유사하게 기능하는 것처럼 보이는 생성자 함수를 사용할 수도 있다.
function Teacher(name) {
    this.group = 1;
    this.name = name;
}

Teacher.prototype.introduce = function() {
    console.log(`안녕하세요. 저는 ${this.group}반 교사 ${this.name} 입니다.`);
}

let teacher = new Teacher('유관순');
teacher.introduce();

new Student();
Teacher();
==============================================================================================================================================================================
class 상속자
/* 
    02. 클래스 상속 
    클래스 상속을 사용하면 클래스를 다른 클래스로 확장할 수 있다.
*/

// 01. 상속 기본 문법
class Animal {

    constructor(name, weight) {
        this.name = name;
        this.weight = weight;
    }

    eat(foodWeight) {
        this.weight += foodWeight;
        console.log(`${this.name}(은)는 ${foodWeight}kg의 식사를 하고 ${this.weight}kg이 되었습니다.`);
    }

    move(lostWeight) {
        if(this.weight > lostWeight)
            this.weight -= lostWeight;
        console.log(`${this.name}(은)는 움직임으로 인해 ${lostWeight}kg 감량되어 ${this.weight}kg이 되었습니다.`);
    }
}

let animal = new Animal('동물', 30);
animal.eat(1);
animal.move(0.5);

class Human extends Animal {

    develop(language) {
        console.log(`${this.name}(은)는 ${language}로 개발을 합니다.`);
    }
}

let human = new Human('수강생', 70);

// Animal에 정의된 메서드 접근 가능
human.eat(2);
human.move(0.5);

// Human에 정의된 메서드 접근 가능
human.develop('javascript');

// 키워드 extends는 프로토타입으로 기반으로 동작한다.
// extends는 Human.prototype.[[Prototype]]을 Animal.prototype으로 설정한다.
// 그렇기 때문에 Human.prototype에서 메서드를 찾지 못하면 Animal.prototype에서 메서드를 가져온다.
====================================================================================================================================================================
class 화살표 함수
/* 
    02. 클래스 상속 
    클래스 상속을 사용하면 클래스를 다른 클래스로 확장할 수 있다.
*/

// 01. 상속 기본 문법
class Animal {

    constructor(name, weight) {
        this.name = name;
        this.weight = weight;
    }

    eat(foodWeight) {
        this.weight += foodWeight;
        console.log(`${this.name}(은)는 ${foodWeight}kg의 식사를 하고 ${this.weight}kg이 되었습니다.`);
    }

    move(lostWeight) {
        if(this.weight > lostWeight)
            this.weight -= lostWeight;
        console.log(`${this.name}(은)는 움직임으로 인해 ${lostWeight}kg 감량되어 ${this.weight}kg이 되었습니다.`);
    }
}

let animal = new Animal('동물', 30);
animal.eat(1);
animal.move(0.5);

class Human extends Animal {

    develop(language) {
        console.log(`${this.name}(은)는 ${language}로 개발을 합니다.`);
    }
}

let human = new Human('수강생', 70);

// Animal에 정의된 메서드 접근 가능
human.eat(2);
human.move(0.5);

// Human에 정의된 메서드 접근 가능
human.develop('javascript');

// 키워드 extends는 프로토타입으로 기반으로 동작한다.
// extends는 Human.prototype.[[Prototype]]을 Animal.prototype으로 설정한다.
// 그렇기 때문에 Human.prototype에서 메서드를 찾지 못하면 Animal.prototype에서 메서드를 가져온다.
